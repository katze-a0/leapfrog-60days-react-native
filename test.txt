// backend/server.js - Your Node.js Express Server

// Import necessary modules
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const admin = require('firebase-admin'); // For Firebase Admin SDK to verify tokens
const cors = require('cors'); // To allow cross-origin requests from your React Native app

// Initialize Express app
const app = express();
const PORT = process.env.PORT || 3000; // Use port 3000 or an environment variable

// --- Firebase Admin SDK Initialization ---
// IMPORTANT: Replace with your Firebase Admin SDK service account key.
// You can download this JSON file from Firebase Project Settings -> Service Accounts.
// For production, store this securely (e.g., environment variable, KMS).
// Make sure this path is correct relative to your server.js file.
const serviceAccount = require('./path/to/your/serviceAccountKey.json'); // <--- UPDATE THIS PATH

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

// --- MongoDB Connection ---
// Replace with your MongoDB Atlas connection string.
// Go to MongoDB Atlas -> Database -> Connect -> Drivers -> Node.js -> Copy connection string.
// Make sure to replace <username>, <password>, and <dbname> with your actual credentials.
const MONGODB_URI = 'mongodb+srv://<username>:<password>@<cluster-url>/<dbname>?retryWrites=true&w=majority'; // <--- UPDATE THIS URI

mongoose.connect(MONGODB_URI)
  .then(() => console.log('MongoDB Atlas connected successfully!'))
  .catch(err => console.error('MongoDB connection error:', err));

// --- Mongoose Schema and Model for Income ---
// Define the schema for your income data
const incomeSchema = new mongoose.Schema({
  userId: {
    type: String,
    required: true,
    index: true // Index for faster queries by userId
  },
  title: {
    type: String,
    required: true,
    trim: true // Remove whitespace from both ends of a string
  },
  amount: {
    type: Number,
    required: true,
    min: 0 // Amount should not be negative
  },
  date: {
    type: Date,
    required: true
  },
  createdAt: {
    type: Date,
    default: Date.now // Automatically set creation timestamp
  }
});

// Create the Mongoose model from the schema
const Income = mongoose.model('Income', incomeSchema);

// --- Middleware ---
app.use(bodyParser.json()); // Parse JSON request bodies
app.use(cors()); // Enable CORS for all routes

// Middleware to verify Firebase ID token
const verifyFirebaseToken = async (req, res, next) => {
  const idToken = req.headers.authorization && req.headers.authorization.split('Bearer ')[1];

  if (!idToken) {
    return res.status(401).json({ error: 'No token provided.' });
  }

  try {
    const decodedToken = await admin.auth().verifyIdToken(idToken);
    req.user = decodedToken; // Attach decoded token (which contains uid) to the request
    next(); // Proceed to the next middleware/route handler
  } catch (error) {
    console.error('Error verifying Firebase ID token:', error);
    return res.status(403).json({ error: 'Unauthorized. Invalid or expired token.' });
  }
};

// --- Routes ---

// Health check route
app.get('/', (req, res) => {
  res.send('Node.js backend is running!');
});

// Route to add a new income entry
// This route is protected by the verifyFirebaseToken middleware
app.post('/api/income', verifyFirebaseToken, async (req, res) => {
  try {
    const { title, amount, date } = req.body;
    const userId = req.user.uid; // Get userId from the decoded Firebase token

    // Input validation
    if (!title || !amount || !date) {
      return res.status(400).json({ error: 'All fields (title, amount, date) are required.' });
    }
    if (typeof amount !== 'number' || amount < 0) {
        return res.status(400).json({ error: 'Amount must be a non-negative number.' });
    }
    if (isNaN(new Date(date).getTime())) {
        return res.status(400).json({ error: 'Invalid date format.' });
    }

    // Create a new Income document
    const newIncome = new Income({
      userId,
      title,
      amount,
      date: new Date(date) // Ensure date is stored as a Date object
    });

    // Save the income document to MongoDB
    await newIncome.save();

    res.status(201).json({ message: 'Income added successfully!', income: newIncome });
  } catch (error) {
    console.error('Error adding income:', error);
    res.status(500).json({ error: 'Failed to add income. Please try again.' });
  }
});

// Route to get all income entries for the authenticated user
app.get('/api/income', verifyFirebaseToken, async (req, res) => {
    try {
        const userId = req.user.uid; // Get userId from the decoded Firebase token
        const incomes = await Income.find({ userId }).sort({ date: -1 }); // Find all incomes for this user, sorted by date descending
        res.status(200).json(incomes);
    } catch (error) {
        console.error('Error fetching income:', error);
        res.status(500).json({ error: 'Failed to fetch income. Please try again.' });
    }
});


// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
  console.log(`Access it at http://localhost:${PORT}`);
});





//frontend

// frontend/IncomeScreen.js - Your React Native component

import React, { useState, useEffect } from 'react';
import { View, Text, TextInput, Button, StyleSheet, Alert, ActivityIndicator } from 'react-native';
import firebase from 'firebase/app'; // Assuming you've initialized Firebase in your app
import 'firebase/auth'; // Import auth module if not already imported

// IMPORTANT: Replace with the actual URL of your Node.js backend.
// If running locally, use your machine's IP address (e.g., http://192.168.1.100:3000)
// If deployed, use the deployed URL (e.g., https://your-backend-app.herokuapp.com)
const BACKEND_URL = 'http://localhost:3000'; // <--- UPDATE THIS URL

const IncomeScreen = () => {
  const [title, setTitle] = useState('');
  const [amount, setAmount] = useState('');
  const [date, setDate] = useState(new Date().toISOString().split('T')[0]); // YYYY-MM-DD format
  const [loading, setLoading] = useState(false);
  const [user, setUser] = useState(null); // To store the current authenticated Firebase user

  useEffect(() => {
    // Listen for Firebase auth state changes
    const unsubscribe = firebase.auth().onAuthStateChanged((currentUser) => {
      setUser(currentUser);
    });

    // Clean up the listener on component unmount
    return () => unsubscribe();
  }, []);

  const handleAddIncome = async () => {
    if (!user) {
      Alert.alert('Error', 'You must be logged in to add income.');
      return;
    }

    if (!title.trim() || !amount.trim() || !date.trim()) {
      Alert.alert('Error', 'Please fill in all fields.');
      return;
    }

    const parsedAmount = parseFloat(amount);
    if (isNaN(parsedAmount) || parsedAmount < 0) {
      Alert.alert('Error', 'Please enter a valid positive amount.');
      return;
    }

    setLoading(true); // Show loading indicator

    try {
      // Get the Firebase ID token for the current user
      const idToken = await user.getIdToken();

      const response = await fetch(`${BACKEND_URL}/api/income`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${idToken}`, // Send the Firebase ID token
        },
        body: JSON.stringify({
          title,
          amount: parsedAmount,
          date,
        }),
      });

      const data = await response.json();

      if (response.ok) {
        Alert.alert('Success', data.message);
        // Clear form fields
        setTitle('');
        setAmount('');
        setDate(new Date().toISOString().split('T')[0]);
        // You might want to refresh a list of incomes here
      } else {
        Alert.alert('Error', data.error || 'Failed to add income.');
      }
    } catch (error) {
      console.error('Network or server error:', error);
      Alert.alert('Error', 'Could not connect to the server. Please check your network.');
    } finally {
      setLoading(false); // Hide loading indicator
    }
  };

  // Optional: Function to fetch income data
  const fetchIncomeData = async () => {
    if (!user) {
      console.log('User not logged in, cannot fetch income.');
      return;
    }
    setLoading(true);
    try {
      const idToken = await user.getIdToken();
      const response = await fetch(`${BACKEND_URL}/api/income`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${idToken}`,
        },
      });
      const data = await response.json();
      if (response.ok) {
        console.log('Fetched income:', data);
        // Update your UI with the fetched income data
      } else {
        Alert.alert('Error', data.error || 'Failed to fetch income.');
      }
    } catch (error) {
      console.error('Error fetching income:', error);
      Alert.alert('Error', 'Could not fetch income data.');
    } finally {
      setLoading(false);
    }
  };


  return (
    <View style={styles.container}>
      <Text style={styles.header}>Add New Income</Text>

      <TextInput
        style={styles.input}
        placeholder="Income Title (e.g., Salary, Freelance)"
        value={title}
        onChangeText={setTitle}
      />
      <TextInput
        style={styles.input}
        placeholder="Amount"
        keyboardType="numeric"
        value={amount}
        onChangeText={setAmount}
      />
      <TextInput
        style={styles.input}
        placeholder="Date (YYYY-MM-DD)"
        value={date}
        onChangeText={setDate}
      />

      {loading ? (
        <ActivityIndicator size="large" color="#0000ff" />
      ) : (
        <Button title="Add Income" onPress={handleAddIncome} />
      )}

      {/* Optional button to fetch data */}
      <View style={styles.fetchButtonContainer}>
        <Button title="Fetch My Income (for testing)" onPress={fetchIncomeData} />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    justifyContent: 'center',
    backgroundColor: '#f5f5f5',
  },
  header: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 30,
    textAlign: 'center',
    color: '#333',
  },
  input: {
    height: 50,
    borderColor: '#ccc',
    borderWidth: 1,
    borderRadius: 8,
    paddingHorizontal: 15,
    marginBottom: 15,
    backgroundColor: '#fff',
    fontSize: 16,
  },
  fetchButtonContainer: {
    marginTop: 20,
  }
});

export default IncomeScreen;